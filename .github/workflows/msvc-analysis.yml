# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
#
# Find more information at:
# https://github.com/microsoft/msvc-code-analysis-action

name: Microsoft C++ Code Analysis

on:
  workflow_dispatch:
#  push:
#    branches: [ master ]
#  pull_request:
#    branches: [ master ]
#  schedule:
#    - cron: '17 9 * * 2'

env:
  # Path to the CMake build directory.
  build: '${{ github.workspace }}/build'
  cmake_build_type: Release
  CONAN_USER_HOME: "C:\\release"
  CONAN_USER_HOME_SHORT: "C:\\release\\short"
  INSTALL_DIR: ${{ github.workspace }}/install/

jobs:
  analyze:
    name: Analyze
    runs-on: windows-2019

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Cache Conan modules
        uses: turtlebrowser/conan-cache@master
        with:
            bot_name: turtlebrowser-bot
            bot_token: ${{ secrets.CACHE_REPO_TOKEN }}
            cache_name: turtlebrowser/conan-center-index-cache
            key: host-${{ runner.os }}-target-${{ runner.os }}-windows-2019-${{ hashFiles('conanfile.py') }}
            target_os: ${{ runner.os }}-windows-2019
            lfs_limit: 60

      - name: Install Conan
        id: conan
        uses: turtlebrowser/get-conan@main

      - name: Conan version
        run: echo "${{ steps.conan.outputs.version }}"

      - name: Get Conan Dependencies
        run: cmake -B ${{ env.build }} -DCMAKE_INSTALL_PREFIX=${{ env.INSTALL_DIR }} -DCMAKE_BUILD_TYPE=${{ env.cmake_build_type }}

      - name: Build
        run: cmake --build ${{ env.build }} --config ${{ env.cmake_build_type }} -j 4

#      - name: Configure CMake
#        run: cmake -B ${{ env.build }} -DCMAKE_BUILD_TYPE=${{ env.cmake_build_type }}
#
#      # Build is not required unless generated source files are used
#      - name: Build CMake
#        run: cmake --build ${{ env.build }}

      - name: Initialize MSVC Code Analysis
        uses: microsoft/msvc-code-analysis-action@main
        # Provide a unique ID to access the sarif output path
        id: run-analysis
        with:
          cmakeBuildDirectory: ${{ env.build }}
          buildConfiguration: ${{ env.cmake_build_type }}
          # Ruleset file that will determine what checks will be run
          ruleset: NativeRecommendedRules.ruleset

      # Upload SARIF file to GitHub Code Scanning Alerts
      - name: Upload SARIF to GitHub
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: ${{ steps.run-analysis.outputs.sarif }}

      # Upload SARIF file as an Artifact to download and view
      # - name: Upload SARIF as an Artifact
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: sarif-file
      #     path: ${{ steps.run-analysis.outputs.sarif }}
