name: CI-Release

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        config:
          - {
            name: "Ubuntu 18.04",
            os: ubuntu-18.04,
            work_dir: "/home/runner/work/work_dir",
          }
          - {
            name: "Ubuntu 20.04",
            os: ubuntu-20.04,
            work_dir: "/home/runner/work/work_dir",
          }
          - {
            name: "Windows 2019",
            os: windows-2019,
            work_dir: "/c/Code",
          }
          - {
            name: "MacOS 10.15",
            os: macos-10.15,
            work_dir: "/Users/runner/work/work_dir",
          }
          - {
            name: "MacOS 11",
            os: macos-11,
            work_dir: "/Users/runner/work/work_dir",
          }

    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    
    env:
      #CONAN_CPU_COUNT: 6
      CONAN_SYSREQUIRES_MODE: enabled
      CONAN_USER_HOME: "${{ matrix.config.work_dir }}/release"
      CONAN_USER_HOME_SHORT: "${{ matrix.config.work_dir }}/release/short"
      INSTALL_DIR: ${{ github.workspace }}/install/

    steps:
    - uses: actions/checkout@v2

    # Check if GitHub Cache has it, because that's free
    - name: Using the builtin GitHub Cache Action for .conan
      if: (startsWith(matrix.config.os, 'windows') == false)
      id: github-cache-conan
      uses: actions/cache@v1
      env:
        cache-name: cache-conan-index-modules
      with:
        path: ${{ env.CONAN_USER_HOME }}
        key: host-${{ runner.os }}-target-${{ runner.os }}-${{ matrix.config.os }}-${{ hashFiles('conanfile.py') }}

    # If GitHub Cache doesn't have it, get from Conan Cache (has git lfs cost)
    - name: Cache Conan modules
      if: steps.github-cache-conan.outputs.cache-hit != 'true'
      id: cache-conan
      uses: turtlebrowser/conan-cache@master
      with:
          bot_name: turtlebrowser-bot
          bot_token: ${{ secrets.CACHE_REPO_TOKEN }}
          cache_name: turtlebrowser/conan-center-index-cache
          key: host-${{ runner.os }}-target-${{ runner.os }}-${{ matrix.config.os }}-${{ hashFiles('conanfile.py') }}
          target_os: ${{ runner.os }}-${{ matrix.config.os }}
          lfs_limit: 60

    # MacOS 10.15 - XCode version 11.7
    # MacOS 11.1  - XCode version 12.4
    # MacOS 11.3  - XCode version 12.5
    # MacOS 12.0  - XCode version 13.0
    - name: Get right SDK for MacOS 11
      if: startsWith(matrix.config.os, 'macos-11')
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '12.5'

    - name: Install Conan
      id: conan
      uses: turtlebrowser/get-conan@main

    - name: Conan version
      run: echo "${{ steps.conan.outputs.version }}"
    
    - name: remove conan's installation registry
      run: conan remove --system-reqs '*'

    - name: Make build directory
      run: mkdir build

#    - name: Get Conan
#      run: |
#        pip3 install wheel setuptools
#        pip3 install conan --upgrade
#        mkdir build
        
#    - name: Fix Path on Ubuntu
#      if: startsWith(matrix.config.os, 'ubuntu')
#      run: echo "/home/runner/.local/bin" >> $GITHUB_PATH

    - name: Add Linux dependencies
      if: startsWith(matrix.config.os, 'ubuntu')
      run: sudo apt-get install libnss3-dev libdbus-1-dev

#    - name: Install patched conan-qt
#      run: |
#        git clone https://github.com/patricia-gallardo/conan-qt.git
#        cd conan-qt
#        git checkout get_opus_from_chromium
#        conan export . qt/5.15.0@patricia-gallardo/patched

    - name: Get Conan Dependencies
      working-directory: build
      run: cmake -DCMAKE_INSTALL_PREFIX=${{ env.INSTALL_DIR }} -DCMAKE_BUILD_TYPE=Release ..

#    - name: Get Licences
#      shell: bash
#      working-directory: ${{ env.CONAN_USER_HOME_SHORT }}
#      env:
#        ABOUT_CREDITS_PATH: "*/qtwebengine/src/core/debug/gen/components/resources/about_credits.html"
#      run: |
#        echo "Try to find the about_credits.html file"
#        find . -wholename  ${{ env.ABOUT_CREDITS_PATH }}
#        find . -wholename  ${{ env.ABOUT_CREDITS_PATH }} -exec cp {} ${{ github.workspace }} \;

    - name: Build
      working-directory: build
      run: cmake --build . --config Release -j 4

    - name: Linux Install
      if: startsWith(matrix.config.os, 'ubuntu')
      working-directory: build
      run: |
        source ${{ github.workspace }}/build/src/activate_run.sh
        cmake --build . --config Release --target install
        cpack -G "RPM;DEB"
        cp *.deb *.rpm ${{ env.INSTALL_DIR }}

    - name: Windows Install (windeployqt)
      if: startsWith(matrix.config.os, 'windows')
      working-directory: build
      run: |
        ${{ github.workspace }}/build/src/activate_run.ps1
        cmake --build . --config Release --target install

    # https://docs.conan.io/en/latest/howtos/manage_shared_libraries/env_vars.html?highlight=dyld_library_path#using-shared-libraries-from-dependencies
    - name: Mac Install (macdeployqt)
      if: startsWith(matrix.config.os, 'macos')
      working-directory: build
      run: |
        source ${{ github.workspace }}/build/src/activate_run.sh
        DYLD_LIBRARY_PATH=$DYLD_LIBRARY_PATH DYLD_FRAMEWORK_PATH=$DYLD_FRAMEWORK_PATH cmake --build . --config Release --target install
    
    - name: remove conan's installation registry
      run: conan remove --system-reqs '*'

#    - name: Upload artifact
#      uses: actions/upload-artifact@v2
#      with:
#        name: ${{ matrix.config.os }}-artifact
#        path: ${{ env.INSTALL_DIR }}
