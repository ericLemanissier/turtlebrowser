name: CI-Release

on:
  workflow_dispatch:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        config:
          - {
            name: "Ubuntu 20.04",
            os: ubuntu-20.04,
            conan_home: "/home/runner/work/conan/release",
            conan_home_short: "/home/runner/work/conan/release/short",
          }
          - {
            name: "Windows 2019",
            os: windows-2019,
            conan_home: "C:\\release",
            conan_home_short: "C:\\release\\short",
          }
          - {
            name: "MacOS 10.15",
            os: macos-10.15,
            conan_home: "/Users/runner/work/conan/release",
            conan_home_short: "/Users/runner/work/conan/release/short",
          }
          - {
            name: "MacOS 11",
            os: macos-11,
            conan_home: "/Users/runner/work/conan/release",
            conan_home_short: "/Users/runner/work/conan/release/short",
          }
          - {
            name: "Ubuntu 18.04",
            os: ubuntu-18.04,
            conan_home: "/home/runner/work/conan/release",
            conan_home_short: "/home/runner/work/conan/release/short",
          }

    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    
    env:
      #CONAN_CPU_COUNT: 6
      #CONAN_VS_INSTALLATION_PREFERENCE: Community
      CONAN_SYSREQUIRES_MODE: enabled
      CONAN_USER_HOME: "${{ matrix.config.conan_home }}"
      CONAN_USER_HOME_SHORT: "${{ matrix.config.conan_home_short }}"
      INSTALL_DIR: ${{ github.workspace }}/install/
      PKG_CONFIG_PATH: /usr/lib/x86_64-linux-gnu/pkgconfig/

    steps:
    - uses: actions/checkout@v2

    # Check if GitHub Cache has it, because that's free
    - name: Using the builtin GitHub Cache Action for .conan
      if: false && (startsWith(matrix.config.os, 'windows') == false)
      id: github-cache-conan
      uses: actions/cache@v1
      env:
        cache-name: cache-conan-index-modules
      with:
        path: ${{ env.CONAN_USER_HOME }}
        key: host-${{ runner.os }}-target-${{ runner.os }}-${{ matrix.config.os }}-${{ hashFiles('conanfile.py') }}

    # If GitHub Cache doesn't have it, get from Conan Cache (has git lfs cost)
    - name: Cache Conan modules
      if: false && steps.github-cache-conan.outputs.cache-hit != 'true'
      id: cache-conan
      uses: turtlebrowser/conan-cache@master
      with:
          bot_name: turtlebrowser-bot
          bot_token: ${{ secrets.CACHE_REPO_TOKEN }}
          cache_name: turtlebrowser/conan-center-index-cache
          key: host-${{ runner.os }}-target-${{ runner.os }}-${{ matrix.config.os }}-${{ hashFiles('conanfile.py') }}
          target_os: ${{ runner.os }}-${{ matrix.config.os }}
          lfs_limit: 60

    # MacOS 10.15 - XCode version 11.7
    # MacOS 11.1  - XCode version 12.4
    # MacOS 11.3  - XCode version 12.5
    # MacOS 12.0  - XCode version 13.0
#    - name: Get right SDK for MacOS 11
#      if: startsWith(matrix.config.os, 'macos-11')
#      uses: maxim-lobanov/setup-xcode@v1
#      with:
#        xcode-version: '12.5'

    - name: Install Conan
      id: conan
      uses: turtlebrowser/get-conan@main

    - name: Conan version
      run: echo "${{ steps.conan.outputs.version }}"
    
    - name: remove conan's installation registry
      run: conan remove --system-reqs '*'

    - name: Make build directory
      run: mkdir build

    - name: Ubuntu 20.04 - Clean Linux Clang dependencies
      if: startsWith(matrix.config.os, 'ubuntu-20.04')
      run: |
        sudo apt list --installed "libclang*-dev"
        sudo apt-get purge --auto-remove libclang-common-10-dev
        sudo apt-get purge --auto-remove libclang-common-11-dev
        sudo apt-get install libclang-12-dev

    - name: Ubuntu 18.04 - Clean Linux Clang dependencies
      if: startsWith(matrix.config.os, 'ubuntu-18.04')
      run: |
        sudo apt list --installed "libclang*-dev"
        sudo apt-get purge --auto-remove libclang-common-7-dev
        sudo apt-get purge --auto-remove libclang-common-8-dev
        sudo apt-get install libclang-9-dev

    - name: Ubuntu - Add Linux dependencies
      if: startsWith(matrix.config.os, 'ubuntu')
      run: sudo apt-get install libnss3-dev libdbus-1-dev

    - name: Ubuntu 18.04 - Upgrade compiler
      if: startsWith(matrix.config.os, 'ubuntu-18.04')
      run: |
        sudo apt install gcc-8 g++-8
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-8 20
        sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-8 20

#    - name: Install patched conan-qt
#      run: |
#        git clone https://github.com/patricia-gallardo/conan-qt.git
#        cd conan-qt
#        git checkout get_opus_from_chromium
#        conan export . qt/5.15.0@patricia-gallardo/patched

    - name: Get Conan Dependencies
      working-directory: build
      run: cmake -DCMAKE_INSTALL_PREFIX=${{ env.INSTALL_DIR }} -DCMAKE_BUILD_TYPE=Release ..

#    - name: Get Licences
#      shell: bash
#      working-directory: ${{ env.CONAN_USER_HOME_SHORT }}
#      env:
#        ABOUT_CREDITS_PATH: "*/qtwebengine/src/core/debug/gen/components/resources/about_credits.html"
#      run: |
#        echo "Try to find the about_credits.html file"
#        find . -wholename  ${{ env.ABOUT_CREDITS_PATH }}
#        find . -wholename  ${{ env.ABOUT_CREDITS_PATH }} -exec cp {} ${{ github.workspace }} \;

    - name: Build
      working-directory: build
      run: cmake --build . --config Release -j 4

    - name: Linux Install
      if: startsWith(matrix.config.os, 'ubuntu')
      working-directory: build
      run: |
        source ${{ github.workspace }}/build/src/activate_run.sh
        cmake --build . --config Release --target install
        cpack -G "RPM;DEB"
        cp *.deb *.rpm ${{ env.INSTALL_DIR }}

    - name: Windows Install (windeployqt)
      if: startsWith(matrix.config.os, 'windows')
      working-directory: build
      run: |
        ${{ github.workspace }}/build/src/activate_run.ps1
        cmake --build . --config Release --target install

    # https://docs.conan.io/en/latest/howtos/manage_shared_libraries/env_vars.html?highlight=dyld_library_path#using-shared-libraries-from-dependencies
    - name: Mac Install (macdeployqt)
      if: startsWith(matrix.config.os, 'macos')
      working-directory: build
      run: |
        source ${{ github.workspace }}/build/src/activate_run.sh
        DYLD_LIBRARY_PATH=$DYLD_LIBRARY_PATH DYLD_FRAMEWORK_PATH=$DYLD_FRAMEWORK_PATH cmake --build . --config Release --target install
    
    - name: remove conan's installation registry
      run: conan remove --system-reqs '*'

    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.config.os }}-artifact
        path: ${{ env.INSTALL_DIR }}
