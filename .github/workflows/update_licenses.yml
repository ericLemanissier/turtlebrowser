name: Update Licenses

on:
  schedule:
    # * is a special character in YAML so you have to quote this string
    - cron:  '30 23 * * 1'

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-18.04, macos-10.15, windows-2019]
        include:
        - os: macos-10.15
          PLATFORM_NAME: macos

        - os: ubuntu-18.04
          PLATFORM_NAME: linux

        - os: windows-2019
          PLATFORM_NAME: windows

    runs-on: ${{ matrix.os }}
    
    env:
      CONAN_USER_HOME: "${{ github.workspace }}/release"
      CONAN_USER_HOME_SHORT: "${{ github.workspace }}/release/short"
      CONAN_SYSREQUIRES_MODE: enabled
      INSTALL_DIR: ${{ github.workspace }}/install/
      RELATIVE_LICENSE_PATH: src/resources/licenses/${{matrix.PLATFORM_NAME}}/
      QRC_FILE_NAME: ${{matrix.PLATFORM_NAME}}_licenses.qrc

    steps:
    - uses: actions/checkout@v2

    - name: Cache Conan modules
      id: cache-conan
      uses: turtlebrowser/conan-cache@master
      with:
          bot_name: turtlebrowser-bot
          bot_token: ${{ secrets.CACHE_REPO_TOKEN }}
          cache_name: turtlebrowser/conan-cache-turtlebrowser
          key: host-${{ runner.os }}-target-${{ runner.os }}-${{ matrix.os }}-${{ hashFiles('conanfile.py') }}
          target_os: ${{ runner.os }}-${{ matrix.os }}
          lfs_limit: 60

    - name: Get Conan
      run: |
        pip3 install wheel setuptools
        pip3 install conan --upgrade
        mkdir build
        
    - name: Fix Path on Ubuntu
      if: matrix.os == 'ubuntu-20.04' || matrix.os == 'ubuntu-18.04'
      run: echo "/home/runner/.local/bin" >> $GITHUB_PATH

    - name: Build licenses
      working-directory: build
      run: cmake -DCHECK_IN_LICENSES=ON -DCMAKE_INSTALL_PREFIX=${{ env.INSTALL_DIR }} -DCMAKE_BUILD_TYPE=Release ..

    - name: Clean licenses
      shell: bash
      run: rm -rf ${{ env.RELATIVE_LICENSE_PATH }}/*

    - name: Install licenses
      working-directory: build
      run: cmake --build . --config Release --target install
         
    - name: Delete build and install directories
      shell: bash
      run: |
        rm -rf build
        rm -rf ${{ env.INSTALL_DIR }}
        
    - name: Clean licenses
      shell: bash
      run: | 
        find ${{ env.RELATIVE_LICENSE_PATH }}/licenses -type f -name "*.cpp" -exec rm {} +
        find ${{ env.RELATIVE_LICENSE_PATH }}/licenses -type f -name "*.h" -exec rm {} +
        find ${{ env.RELATIVE_LICENSE_PATH }}/licenses -type f -name "*.cc" -exec rm {} +
        find ${{ env.RELATIVE_LICENSE_PATH }}/licenses -type f -name "*.py" -exec rm {} +
        find ${{ env.RELATIVE_LICENSE_PATH }}/licenses -type f -name "*.pyc" -exec rm {} +
        find ${{ env.RELATIVE_LICENSE_PATH }}/licenses -type f -name "*.pl" -exec rm {} +
        find ${{ env.RELATIVE_LICENSE_PATH }}/licenses -type f -name "*.pl.vanilla" -exec rm {} +
        find ${{ env.RELATIVE_LICENSE_PATH }}/licenses -type f -name "*.js" -exec rm {} +
        find ${{ env.RELATIVE_LICENSE_PATH }}/licenses -type f -name "*,js" -exec rm {} +
        find ${{ env.RELATIVE_LICENSE_PATH }}/licenses -type f -name "*.json" -exec rm {} +
        find ${{ env.RELATIVE_LICENSE_PATH }}/licenses -type f -name "*.pro" -exec rm {} +
        find ${{ env.RELATIVE_LICENSE_PATH }}/licenses -type f -name "*.qrc" -exec rm {} +
        find ${{ env.RELATIVE_LICENSE_PATH }}/licenses -type f -name "*.png" -exec rm {} +
        find ${{ env.RELATIVE_LICENSE_PATH }}/licenses -type f -name "*.qdoc" -exec rm {} +
        find ${{ env.RELATIVE_LICENSE_PATH }}/licenses -type f -name "*.yml" -exec rm {} +
        find ${{ env.RELATIVE_LICENSE_PATH }}/licenses -type f -name "*.patch" -exec rm {} +
        find ${{ env.RELATIVE_LICENSE_PATH }}/licenses -type f -name "*.ini" -exec rm {} +
        find ${{ env.RELATIVE_LICENSE_PATH }}/licenses -type f -name "CHANGELOG.md" -exec rm {} +
        find ${{ env.RELATIVE_LICENSE_PATH }}/licenses -type f -name "README.md" -exec rm {} +
        find ${{ env.RELATIVE_LICENSE_PATH }}/licenses -type f -name ".npmignore" -exec rm {} +
        find ${{ env.RELATIVE_LICENSE_PATH }}/licenses -type f -name ".eslintignore" -exec rm {} +
        find ${{ env.RELATIVE_LICENSE_PATH }}/licenses -type f -name "license-checker" -exec rm {} +
        find ${{ env.RELATIVE_LICENSE_PATH }}/licenses -type f -name "nopt" -exec rm {} +
        find ${{ env.RELATIVE_LICENSE_PATH }}/licenses -type f -name "OWNERS" -exec rm {} +

    - name: Make qrc
      shell: bash
      working-directory: ${{ env.RELATIVE_LICENSE_PATH }}
      run: |
        touch ${{ env.QRC_FILE_NAME }}
        echo '<RCC><qresource prefix="/">' >> ${{ env.QRC_FILE_NAME }}
        find licenses -type f -exec echo "<file>{}</file>" \; >>  ${{ env.QRC_FILE_NAME }}
        echo '</qresource></RCC>' >> ${{ env.QRC_FILE_NAME }}
  
    - name: Check LongPathsEnabled On Windows
      if: matrix.os == 'windows-2019'
      run: |
        (Get-ItemProperty "HKLM:System\CurrentControlSet\Control\FileSystem").LongPathsEnabled
     
    - name: Configure Git
      shell: bash
      run: |
        git config user.email "bot@turtlebrowser.com"
        git config user.name "Turtle Bot (GitHub Action)"
        git config core.longpaths true
        git config pull.rebase true
        git config rebase.autoStash true
        git pull
        
    - name: Commit qrc
      shell: bash
      working-directory: ${{ env.RELATIVE_LICENSE_PATH }}
      run: | 
        if [[ "$(git status --porcelain ${{ env.QRC_FILE_NAME }})" != "" ]]; then
          git add ${{ env.QRC_FILE_NAME }}
          git commit -m "Updated qrc file"
        fi
    
    - name: Commit licenses
      shell: bash
      working-directory: ${{ env.RELATIVE_LICENSE_PATH }}
      run: | 
        if [[ "$(git status --porcelain .)" != "" ]]; then
          git add -A .
          git commit -m "Updated license files"
        fi
              
    - name: Push licenses and qrc
      shell: bash
      run: |
        git pull
        git push
        
    - name: Prepare test build
      run: |
        git checkout .
        git clean -df
        mkdir build
 
    - name: Perfom test build
      working-directory: build
      run: |
        cmake -DCMAKE_BUILD_TYPE=Release ..
        cmake --build . --config Release -j 4
